// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issue.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Confidence represents the tool's confidence that an issue exists
type Confidence int32

const (
	Confidence_CONFIDENCE_INFO     Confidence = 0
	Confidence_CONFIDENCE_LOW      Confidence = 1
	Confidence_CONFIDENCE_MEDIUM   Confidence = 2
	Confidence_CONFIDENCE_HIGH     Confidence = 3
	Confidence_CONFIDENCE_CRITICAL Confidence = 4
)

var Confidence_name = map[int32]string{
	0: "CONFIDENCE_INFO",
	1: "CONFIDENCE_LOW",
	2: "CONFIDENCE_MEDIUM",
	3: "CONFIDENCE_HIGH",
	4: "CONFIDENCE_CRITICAL",
}

var Confidence_value = map[string]int32{
	"CONFIDENCE_INFO":     0,
	"CONFIDENCE_LOW":      1,
	"CONFIDENCE_MEDIUM":   2,
	"CONFIDENCE_HIGH":     3,
	"CONFIDENCE_CRITICAL": 4,
}

func (x Confidence) String() string {
	return proto.EnumName(Confidence_name, int32(x))
}

func (Confidence) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84b04bb87b76e60b, []int{0}
}

// Severity represents the reported issue severity
type Severity int32

const (
	Severity_SEVERITY_INFO     Severity = 0
	Severity_SEVERITY_LOW      Severity = 1
	Severity_SEVERITY_MEDIUM   Severity = 2
	Severity_SEVERITY_HIGH     Severity = 3
	Severity_SEVERITY_CRITICAL Severity = 4
)

var Severity_name = map[int32]string{
	0: "SEVERITY_INFO",
	1: "SEVERITY_LOW",
	2: "SEVERITY_MEDIUM",
	3: "SEVERITY_HIGH",
	4: "SEVERITY_CRITICAL",
}

var Severity_value = map[string]int32{
	"SEVERITY_INFO":     0,
	"SEVERITY_LOW":      1,
	"SEVERITY_MEDIUM":   2,
	"SEVERITY_HIGH":     3,
	"SEVERITY_CRITICAL": 4,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84b04bb87b76e60b, []int{1}
}

// Issue represents a vulnerability to be processed by consumers
type Issue struct {
	Target               string     `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Type                 string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title                string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Severity             Severity   `protobuf:"varint,4,opt,name=severity,proto3,enum=dracon.v1.Severity" json:"severity,omitempty"`
	Cvss                 float64    `protobuf:"fixed64,5,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Confidence           Confidence `protobuf:"varint,6,opt,name=confidence,proto3,enum=dracon.v1.Confidence" json:"confidence,omitempty"`
	Description          string     `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Source               string     `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_84b04bb87b76e60b, []int{0}
}

func (m *Issue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue.Unmarshal(m, b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
}
func (m *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(m, src)
}
func (m *Issue) XXX_Size() int {
	return xxx_messageInfo_Issue.Size(m)
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Issue) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_SEVERITY_INFO
}

func (m *Issue) GetCvss() float64 {
	if m != nil {
		return m.Cvss
	}
	return 0
}

func (m *Issue) GetConfidence() Confidence {
	if m != nil {
		return m.Confidence
	}
	return Confidence_CONFIDENCE_INFO
}

func (m *Issue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issue) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// Represents an issue that has been enriched with metadata from the enrichment service
type EnrichedIssue struct {
	RawIssue *Issue `protobuf:"bytes,1,opt,name=raw_issue,json=rawIssue,proto3" json:"raw_issue,omitempty"`
	// The first time this issue was seen by the enrichment service
	FirstSeen *timestamp.Timestamp `protobuf:"bytes,2,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	// The number of times this issue was seen
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// Whether this issue has been previously marked as a false positive
	FalsePositive bool `protobuf:"varint,4,opt,name=false_positive,json=falsePositive,proto3" json:"false_positive,omitempty"`
	// The last time this issue was updated
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// hash
	Hash                 string   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnrichedIssue) Reset()         { *m = EnrichedIssue{} }
func (m *EnrichedIssue) String() string { return proto.CompactTextString(m) }
func (*EnrichedIssue) ProtoMessage()    {}
func (*EnrichedIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_84b04bb87b76e60b, []int{1}
}

func (m *EnrichedIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnrichedIssue.Unmarshal(m, b)
}
func (m *EnrichedIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnrichedIssue.Marshal(b, m, deterministic)
}
func (m *EnrichedIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrichedIssue.Merge(m, src)
}
func (m *EnrichedIssue) XXX_Size() int {
	return xxx_messageInfo_EnrichedIssue.Size(m)
}
func (m *EnrichedIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrichedIssue.DiscardUnknown(m)
}

var xxx_messageInfo_EnrichedIssue proto.InternalMessageInfo

func (m *EnrichedIssue) GetRawIssue() *Issue {
	if m != nil {
		return m.RawIssue
	}
	return nil
}

func (m *EnrichedIssue) GetFirstSeen() *timestamp.Timestamp {
	if m != nil {
		return m.FirstSeen
	}
	return nil
}

func (m *EnrichedIssue) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EnrichedIssue) GetFalsePositive() bool {
	if m != nil {
		return m.FalsePositive
	}
	return false
}

func (m *EnrichedIssue) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *EnrichedIssue) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterEnum("dracon.v1.Confidence", Confidence_name, Confidence_value)
	proto.RegisterEnum("dracon.v1.Severity", Severity_name, Severity_value)
	proto.RegisterType((*Issue)(nil), "dracon.v1.Issue")
	proto.RegisterType((*EnrichedIssue)(nil), "dracon.v1.EnrichedIssue")
}

func init() { proto.RegisterFile("issue.proto", fileDescriptor_84b04bb87b76e60b) }

var fileDescriptor_84b04bb87b76e60b = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x6f, 0xda, 0x40,
	0x10, 0x85, 0x6b, 0x02, 0x14, 0x86, 0x42, 0xcc, 0x52, 0x5a, 0x2b, 0x97, 0xa2, 0x48, 0x95, 0x50,
	0xa4, 0x1a, 0x85, 0xaa, 0x87, 0x1e, 0x53, 0xe2, 0x34, 0x96, 0x12, 0xa8, 0x16, 0xda, 0xaa, 0xbd,
	0x20, 0xc7, 0x1e, 0x60, 0x25, 0xe2, 0xb5, 0x76, 0x17, 0xa2, 0xf4, 0xde, 0xdf, 0xdd, 0xca, 0x63,
	0xe3, 0x58, 0xbd, 0xf4, 0xb6, 0xf3, 0xf6, 0xcd, 0xbc, 0xd9, 0xcf, 0x86, 0x96, 0xd0, 0x7a, 0x87,
	0x6e, 0xa2, 0xa4, 0x91, 0xac, 0x19, 0xa9, 0x20, 0x94, 0xb1, 0xbb, 0x3f, 0x3f, 0x79, 0xb3, 0x96,
	0x72, 0xbd, 0xc5, 0x11, 0x5d, 0xdc, 0xed, 0x56, 0x23, 0x23, 0xee, 0x51, 0x9b, 0xe0, 0x3e, 0xc9,
	0xbc, 0xa7, 0x7f, 0x2c, 0xa8, 0xf9, 0x69, 0x2f, 0x7b, 0x05, 0x75, 0x13, 0xa8, 0x35, 0x1a, 0xc7,
	0x1a, 0x58, 0xc3, 0x26, 0xcf, 0x2b, 0xc6, 0xa0, 0x6a, 0x1e, 0x13, 0x74, 0x2a, 0xa4, 0xd2, 0x99,
	0xbd, 0x84, 0x9a, 0x11, 0x66, 0x8b, 0xce, 0x11, 0x89, 0x59, 0xc1, 0x46, 0xd0, 0xd0, 0xb8, 0x47,
	0x25, 0xcc, 0xa3, 0x53, 0x1d, 0x58, 0xc3, 0xce, 0xb8, 0xe7, 0x16, 0xab, 0xb8, 0xf3, 0xfc, 0x8a,
	0x17, 0xa6, 0x74, 0x74, 0xb8, 0xd7, 0xda, 0xa9, 0x0d, 0xac, 0xa1, 0xc5, 0xe9, 0xcc, 0x3e, 0x00,
	0x84, 0x32, 0x5e, 0x89, 0x08, 0xe3, 0x10, 0x9d, 0x3a, 0x8d, 0xe9, 0x97, 0xc6, 0x4c, 0x8a, 0x4b,
	0x5e, 0x32, 0xb2, 0x01, 0xb4, 0x22, 0xd4, 0xa1, 0x12, 0x89, 0x11, 0x32, 0x76, 0x9e, 0xd3, 0x5e,
	0x65, 0x29, 0x7d, 0x9f, 0x96, 0x3b, 0x15, 0xa2, 0xd3, 0xc8, 0xde, 0x97, 0x55, 0xa7, 0xbf, 0x2b,
	0xd0, 0xf6, 0x62, 0x25, 0xc2, 0x0d, 0x46, 0x19, 0x89, 0x77, 0xd0, 0x54, 0xc1, 0xc3, 0x92, 0x90,
	0x12, 0x8c, 0xd6, 0xd8, 0x2e, 0x6d, 0x40, 0x26, 0xde, 0x50, 0xc1, 0x43, 0x66, 0xff, 0x08, 0xb0,
	0x12, 0x4a, 0x9b, 0xa5, 0x46, 0x8c, 0x09, 0x53, 0x6b, 0x7c, 0xe2, 0x66, 0xe0, 0xdd, 0x03, 0x78,
	0x77, 0x71, 0x00, 0xcf, 0x9b, 0xe4, 0x9e, 0x23, 0xc6, 0x29, 0xc7, 0x50, 0xee, 0x62, 0x43, 0x1c,
	0xab, 0x3c, 0x2b, 0xd8, 0x5b, 0xe8, 0xac, 0x82, 0xad, 0xc6, 0x65, 0x22, 0xb5, 0x30, 0x62, 0x8f,
	0x44, 0xb3, 0xc1, 0xdb, 0xa4, 0x7e, 0xc9, 0xc5, 0x34, 0x77, 0x97, 0x44, 0x81, 0xc1, 0x68, 0x19,
	0x18, 0x62, 0xf8, 0x9f, 0xdc, 0xdc, 0x7d, 0x41, 0xdf, 0x74, 0x13, 0xe8, 0x0d, 0xe1, 0x6d, 0x72,
	0x3a, 0x9f, 0xfd, 0x02, 0x78, 0x62, 0xcb, 0x7a, 0x70, 0x3c, 0x99, 0x4d, 0xaf, 0xfc, 0x4b, 0x6f,
	0x3a, 0xf1, 0x96, 0xfe, 0xf4, 0x6a, 0x66, 0x3f, 0x63, 0x0c, 0x3a, 0x25, 0xf1, 0x66, 0xf6, 0xdd,
	0xb6, 0x58, 0x1f, 0xba, 0x25, 0xed, 0xd6, 0xbb, 0xf4, 0xbf, 0xde, 0xda, 0x95, 0x7f, 0xfa, 0xaf,
	0xfd, 0xcf, 0xd7, 0xf6, 0x11, 0x7b, 0x0d, 0xbd, 0x92, 0x38, 0xe1, 0xfe, 0xc2, 0x9f, 0x5c, 0xdc,
	0xd8, 0xd5, 0xb3, 0x18, 0x1a, 0x87, 0xdf, 0x83, 0x75, 0xa1, 0x3d, 0xf7, 0xbe, 0x79, 0xdc, 0x5f,
	0xfc, 0x38, 0xe4, 0xda, 0xf0, 0xa2, 0x90, 0xb2, 0xd4, 0x1e, 0x1c, 0x17, 0x4a, 0x91, 0x59, 0xee,
	0xcc, 0x13, 0xfb, 0xd0, 0x2d, 0xa4, 0xa7, 0xbc, 0x4f, 0xd5, 0x9f, 0x95, 0xfd, 0xf9, 0x5d, 0x9d,
	0x20, 0xbd, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x4e, 0x52, 0x87, 0x3d, 0x03, 0x00, 0x00,
}
